service:
  name: online-scoreboard-server

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}

functions:
  graphql:
    description: 'Online Scoreboard ${self:provider.stage} function'
    handler: handler.graphqlHandler

plugins:
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline

custom:
  accountId: ${opt:accountId}
  appSync:
      name: OnlineScoreboard-${self:provider.stage}
      authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
      serviceRole: "AppSyncServiceRole-${self:provider.stage}"

      userPoolConfig:
        awsRegion: ${self:provider.region}
        defaultAction: ALLOW
        userPoolId: {Ref: CognitoUserPoolUsers}

      # mappingTemplatesLocation: # defaults to mapping-templates
      mappingTemplates:
        - dataSource: OnlineScoreBoard
          type: Query
          field: listGames
          request: "listGames-request-mapping-template.vtl"
          response: "listGames-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: Query
          field: listUsers
          request: "listUsers-request-mapping-template.vtl"
          response: "listUsers-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: ModelGameConnection
          field: count
          request: "countGames-request-mapping-template.vtl"
          response: "countGames-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: ModelUserConnection
          field: count
          request: "countUsers-request-mapping-template.vtl"
          response: "countUsers-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: Query
          field: whoAmI
          request: "whoAmI-request-mapping-template.vtl"
          response: "whoAmI-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: Query
          field: getUser
          request: "getUser-request-mapping-template.vtl"
          response: "getUser-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: User
          field: completedGames
          request: "completedGames-request-mapping-template.vtl"
          response: "completedGames-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: User
          field: activeGames
          request: "activeGames-request-mapping-template.vtl"
          response: "activeGames-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: Mutation
          field: createUser
          request: "createUser-request-mapping-template.vtl"
          response: "createUser-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: Mutation
          field: createGame
          request: "createGame-request-mapping-template.vtl"
          response: "createGame-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          type: Mutation
          field: updateUser
          request: "updateUser-request-mapping-template.vtl"
          response: "updateUser-response-mapping-template.vtl"
        - type: Mutation
          field: shuffleAvatar
          request: "shuffle-avatar-request-mapping-template-before.vtl"
          response: "shuffle-avatar-response-mapping-template-after.vtl"
          kind: PIPELINE
          functions:
            - shuffleAvatar
            - updateUserData

      functionConfigurations:
        - dataSource: graphqlLambda
          name: 'shuffleAvatar'
          request: "shuffle-avatar-request-mapping-template.vtl"
          response: "shuffle-avatar-response-mapping-template.vtl"
        - dataSource: OnlineScoreBoard
          name: 'updateUserData'
          request: "updateUserData-request-mapping-template.vtl"
          response: "updateUserData-response-mapping-template.vtl"

      dataSources:
      - type: AMAZON_DYNAMODB
        name: OnlineScoreBoard
        description: 'Online Scoreboard ${self:provider.stage}'
        config:
          tableName: { Ref: OnlineScoreboardTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: graphqlLambda
        description: 'Lambda DataSource'
        config:
          functionName: graphql
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] } # Where AppSyncLambdaServiceRole is an IAM role defined in Resources

resources:
  Resources:
    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: OnlineScoreboard-${self:provider.stage}
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        UsernameAttributes:
          - email

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: "Web"
          GenerateSecret: false
          RefreshTokenValidity: 30
          UserPoolId: {Ref: CognitoUserPoolUsers}

    OnlineScoreboardTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "OnlineScoreBoard-${self:provider.stage}"
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: __typename
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: __typename
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: TypenameGSI
            KeySchema:
              -
                AttributeName: __typename
                KeyType: HASH
              -
                AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Dynamo-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:GetItem"
                    - "dynamodb:UpdateItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:DeleteItem"
                  Resource:
                    - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/OnlineScoreBoard-${self:provider.stage}"
                    - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/OnlineScoreBoard-${self:provider.stage}/*"

    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:online-scoreboard-server-${self:provider.stage}-graphql"
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:online-scoreboard-server-${self:provider.stage}-graphql:*"
