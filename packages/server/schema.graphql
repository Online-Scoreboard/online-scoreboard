enum Color {
  white
  red
  yellow
  blue
  green
  gray
  pink
  brown
  lime
  teal
  purple
  gold
  aquamarine
  darkorange
  black
}

type GameSetup {
  gameName: String
}

type GameRules {
  isMatchesBased: Boolean
  winningScoreEnabled: Boolean
  maxTeamSize: Int
  minTeamSize: Int
  startingScore: Int
  winningScore: Int
  name: String
  scoringSystem: String
}

type GameLog {
  playerId: String
  score: Int
  createdAt: String
}

type Game {
  id: String!
  createdAt: String!
  updatedAt: String!
  status: String!
  owner: String!
  name: String!
  rules: GameRules!
  users: [GameUser]!
  players: [GamePlayer]! # TODO
  teamColors: [Color]!
  teams: Int!
  log: [GameLog] # TODO
  pendingUsers: [PendingUser]!
}

type PendingUser {
  id: String
  item: User
}

type GameUser {
  id: String
  item: User
}

type GamePlayer {
  id: String
  item: Player
}

type ModelGameConnection {
  items: [Game]!
  count: Int!
  nextToken: String
}

type ModelUserConnection {
  items: [User]!
  count: Int!
  nextToken: String
}

type Player {
  color: Color!
  name: String
  userId: String
}

type User {
  id: String!
  username: String!
  avatar: String!
  createdAt: String!
  completedGames: [Game]!
  activeGames: [Game]!
}

input GameSetupInput {
  gameName: String
}

input GameRulesInput {
  isMatchesBased: Boolean
  winningScoreEnabled: Boolean
  maxTeamSize: Int
  minTeamSize: Int
  startingScore: Int
  winningScore: Int
  name: String
  scoringSystem: String
}

input CreateGameInput {
  setup: GameSetupInput!
  rules: GameRulesInput!
  teams: Int!
  teamColors: [Color]!
}

input UpdateUserInput {
  username: String
  avatar: String
}

input GameLogInput {
  playerId: String
  score: Int
}

input AcceptUserInput {
  gameId: String
  pendingUserId: String
}

input RejectUserInput {
  gameId: String
  pendingUserId: String
}

type Query {
  whoAmI: User
  getUser(userId: String!): User
  getGame(gameId: String!): Game
  listGames(limit: Int, nextToken: String): ModelGameConnection!
  listUsers(limit: Int, nextToken: String): ModelUserConnection!
}

type Mutation {
  shuffleAvatar: User
  createUser: User
  updateUser(input: UpdateUserInput!): User
  createGame(input: CreateGameInput!): Game
  startGame(gameId: String!): Game
  joinGame(gameId: String!): Game
  acceptUser(input: AcceptUserInput!): Game
  rejectUser(input: RejectUserInput!): Game
}

type Subscription {
  gameUpdated(id: String!): Game @aws_subscribe(mutations: ["startGame", "joinGame", "acceptUser", "rejectUser"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
