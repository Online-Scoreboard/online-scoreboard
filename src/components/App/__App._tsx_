import React, { useEffect, useCallback, memo } from 'react';
// import { renderToStaticMarkup } from 'react-dom/server';
// import { Background } from './App.background';
import { navigate } from '@reach/router';
import { AppBar } from '@material-ui/core';

import { PrivateRouter } from '../PrivateRouter';
import { useNotification, Notification } from '../Notification';
import { useAuth } from '../../hooks/Auth';
import { Loading } from '../Loading';
import { Toolbar } from './Toolbar';
import { Footer } from './Footer';
import useAppStyles from './App.styles';

const AppComponent: React.FC = () => {
  const classes = useAppStyles();
  const { isLoggedIn, confirmEmail, logOut, loading, error, info, success, user } = useAuth();
  const { open, variant, message, openNotification } = useNotification();
  // const [hue, setHue] = useState(0);
  // const [color, setColor] = useState('hsl(0, 10%, 14%)');
  // useAnimationFrame(0.1, () => {
  //   if (hue > 359) {
  //     setHue(0);
  //   } else {
  //     setHue(currHue => (currHue += 36));
  //   }

  //   setColor(`hsl(${hue}, 10%, 14%)`);
  // });

  useEffect(() => {
    if (error) {
      openNotification(error, 'error');
    }

    if (info) {
      openNotification(info, 'success');
    }

    if (success) {
      openNotification(success, 'success');
    }
  }, [error, info, success, openNotification]);

  const onLogOut = useCallback(async () => {
    try {
      await logOut();
    } catch (err) {
      return;
    }

    navigate('/');
  }, [logOut]);

  if (loading) {
    return <Loading />;
  }

  // const svgString = encodeURIComponent(renderToStaticMarkup(<Background color={color} />));
  // const dataUri = `url("data:image/svg+xml,${svgString}")`;
  //Slice.svg style={{ background: dataUri, transition: `background linear 3s` }}

  return (
    <div className={`${classes.root} App`}>
      <Notification message={message} open={open} variant={variant} />
      <AppBar position="static" color="primary" elevation={0} className={classes.appBar}>
        <Toolbar isLoggedIn={isLoggedIn} onLogOut={onLogOut} user={user} />
      </AppBar>

      <div className={classes.content}>
        <PrivateRouter isLoggedIn={isLoggedIn} confirmEmail={confirmEmail} />
        <DiceIcon color="#222" className={classes.floatingDice1} />
        <DiceIcon color="#111" className={classes.floatingDice2} />
      </div>

      <Footer />
    </div>
  );
};

export const App = memo(AppComponent);
